#compdef commander-cli

autoload -U is-at-least

_commander-cli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'--config-file=[Config file path (default = ~/.config/commander-cli/config.toml)]:Config file path: ' \
'--topics-file=[CEOS topics file path (default = ~/.config/commander-cli/topics.csv)]:CEOS topics file path: ' \
'-e+[Environment (default = production) (should match a defined environment in the config file)]:Environment: ' \
'--environment=[Environment (default = production) (should match a defined environment in the config file)]:Environment: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli_commands" \
"*::: :->commander-cli" \
&& ret=0
    case $state in
    (commander-cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-command-$line[1]:"
        case $line[1] in
            (ping)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(system-status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-o[Display only failed status]' \
'--only-fail[Display only failed status]' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(reboot)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(public-ip)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(rauc)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__rauc_commands" \
"*::: :->rauc" \
&& ret=0

    case $state in
    (rauc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-rauc-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" : \
'-b+[Bearer token]:BEARER: ' \
'--bearer=[Bearer token]:BEARER: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':url -- Bundle full URL:' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'-b+[Bearer token]:BEARER: ' \
'--bearer=[Bearer token]:BEARER: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':url -- Bundle full URL:' \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__rauc__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-rauc-help-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(rssh)
_arguments "${_arguments_options[@]}" : \
'-p+[Port number]:PORT: ' \
'--port=[Port number]:PORT: ' \
'-k+[Path to key]:KEY_PATH: ' \
'--key-path=[Path to key]:KEY_PATH: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-n[No login]' \
'--no-login[No login]' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(core)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__core_commands" \
"*::: :->core" \
&& ret=0

    case $state in
    (core)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-core-command-$line[1]:"
        case $line[1] in
            (profiling-timings)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(profiling-counters)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(sync-request)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(identity)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(devices)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(rules)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(scheduler-events)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(latest-dhls)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(latest-lhls)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(latest-rthls)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(update-model)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':parent_idx:' \
':model_idx:' \
&& ret=0
;;
(queues-stats)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__core__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-core-help-command-$line[1]:"
        case $line[1] in
            (profiling-timings)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(profiling-counters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sync-request)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(identity)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(devices)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rules)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(scheduler-events)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-dhls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-lhls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-rthls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update-model)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(queues-stats)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(download)
_arguments "${_arguments_options[@]}" : \
'--destination=[Local destination folder]:DESTINATION: ' \
'-k+[Path to key]:KEY_PATH: ' \
'--key-path=[Path to key]:KEY_PATH: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__download_commands" \
"*::: :->download" \
&& ret=0

    case $state in
    (download)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-download-command-$line[1]:"
        case $line[1] in
            (database)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(custom)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::sources -- List of sources:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__download__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-download-help-command-$line[1]:"
        case $line[1] in
            (database)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(custom)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zwave_commands" \
"*::: :->zwave" \
&& ret=0

    case $state in
    (zwave)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zwave-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(ping-node)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
&& ret=0
;;
(get-nodes-status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'*::nodes_id -- One or more node ids:' \
&& ret=0
;;
(rebuild-node-routes)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
&& ret=0
;;
(get-node-neighbors)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--dont-throw[Raise an error if failure]' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
&& ret=0
;;
(firmware-update-ota)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
':url -- Firmware file path:' \
':integrity -- Firmware checksum (prefixed with '\''sha256\:'\'' for SHA256):' \
'::target -- Target on Node:' \
&& ret=0
;;
(re-interview-node)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--reset-security-classes[resetSecurityClasses; Whether a re-interview should also reset the known security classes, default = false]' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
&& ret=0
;;
(write-value)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
':command_class -- Command class:' \
':endpoint -- Endpoint:' \
':property -- Property:' \
':value -- Value:' \
'::property_key -- Property key:' \
&& ret=0
;;
(soft-reset)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(lifeline-health)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- Node Id:' \
':rounds -- Number of rounds to execute:' \
&& ret=0
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zwave__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zwave-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zwave__neighbors__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zwave-neighbors-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zwave__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zwave-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ping-node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get-nodes-status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rebuild-node-routes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get-node-neighbors)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(firmware-update-ota)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(re-interview-node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(write-value)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(soft-reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(lifeline-health)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zwave__help__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zwave-help-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee_commands" \
"*::: :->zigbee" \
&& ret=0

    case $state in
    (zigbee)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-command-$line[1]:"
        case $line[1] in
            (device)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee__device_commands" \
"*::: :->device" \
&& ret=0

    case $state in
    (device)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-device-command-$line[1]:"
        case $line[1] in
            (remove)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':eui64 -- Eui64 (hex, prefixed with '\''0x'\''):' \
&& ret=0
;;
(clear-table)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__device__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-device-help-command-$line[1]:"
        case $line[1] in
            (remove)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clear-table)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(zcl)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee__zcl_commands" \
"*::: :->zcl" \
&& ret=0

    case $state in
    (zcl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-zcl-command-$line[1]:"
        case $line[1] in
            (read)
_arguments "${_arguments_options[@]}" : \
'-e+[Endpoint]:ENDPOINT: ' \
'--endpoint=[Endpoint]:ENDPOINT: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':eui64 -- Eui64 (hex, prefixed with '\''0x'\''):' \
':cluster -- Cluster ID (hex, prefixed with '\''0x'\''):' \
':attr -- Attribute ID (hex, prefixed with '\''0x'\''):' \
&& ret=0
;;
(write)
_arguments "${_arguments_options[@]}" : \
'-e+[Endpoint]:ENDPOINT: ' \
'--endpoint=[Endpoint]:ENDPOINT: ' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':eui64 -- Eui64 (hex, prefixed with '\''0x'\''):' \
':cluster -- Cluster ID (hex, prefixed with '\''0x'\''):' \
':attr -- Attribute ID (hex, prefixed with '\''0x'\''):' \
':attr_type -- Attribute type (hex, prefixed with '\''0x'\''):' \
':value -- Value (hex, prefixed with '\''0x'\''):' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__zcl__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-zcl-help-command-$line[1]:"
        case $line[1] in
            (read)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(write)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(network)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee__network_commands" \
"*::: :->network" \
&& ret=0

    case $state in
    (network)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-network-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(leave)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(open)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(close)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__network__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-network-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(leave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(open)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(close)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(bindings)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee__bindings_commands" \
"*::: :->bindings" \
&& ret=0

    case $state in
    (bindings)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-bindings-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':node_id -- 16-bit Network address (hex, prefixed with '\''0x'\''):' \
&& ret=0
;;
(list-all)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':dest_node_id -- The 16-bit Network address of the device whose table we want to write (hex, prefixed with '\''0x'\''):' \
':cluster_id -- Cluster ID (hex, prefixed with '\''0x'\''):' \
':src_endpoint -- Source endpoint:' \
':dst_endpoint -- Destination endpoint:' \
':src_eui64 -- `src_eui64` (hex, prefixed with '\''0x'\''):' \
'::dst_eui64 -- `dst_eui64` (hex, prefixed with '\''0x'\''):' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__bindings__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-bindings-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list-all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__zigbee__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__neighbors__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-neighbors-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-command-$line[1]:"
        case $line[1] in
            (device)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help__device_commands" \
"*::: :->device" \
&& ret=0

    case $state in
    (device)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-device-command-$line[1]:"
        case $line[1] in
            (remove)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clear-table)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(zcl)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help__zcl_commands" \
"*::: :->zcl" \
&& ret=0

    case $state in
    (zcl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-zcl-command-$line[1]:"
        case $line[1] in
            (read)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(write)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(network)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help__network_commands" \
"*::: :->network" \
&& ret=0

    case $state in
    (network)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-network-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(leave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(open)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(close)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(bindings)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help__bindings_commands" \
"*::: :->bindings" \
&& ret=0

    case $state in
    (bindings)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-bindings-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list-all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__zigbee__help__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-zigbee-help-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(radio)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__radio_commands" \
"*::: :->radio" \
&& ret=0

    case $state in
    (radio)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-command-$line[1]:"
        case $line[1] in
            (neighbors)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__radio__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__radio__neighbors__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-neighbors-get-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__neighbors__get__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-neighbors-get-help-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__neighbors__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-neighbors-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__neighbors__help__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-neighbors-help-get-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-help-command-$line[1]:"
        case $line[1] in
            (neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__help__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-help-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__radio__help__neighbors__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-radio-help-neighbors-get-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(system)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__system_commands" \
"*::: :->system" \
&& ret=0

    case $state in
    (system)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-command-$line[1]:"
        case $line[1] in
            (config)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__system__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-config-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(set-key)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__system__config__set-key_commands" \
"*::: :->set-key" \
&& ret=0

    case $state in
    (set-key)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-config-set-key-command-$line[1]:"
        case $line[1] in
            (api-url)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':url -- New API URL:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__config__set-key__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-config-set-key-help-command-$line[1]:"
        case $line[1] in
            (api-url)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-config-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set-key)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__config__help__set-key_commands" \
"*::: :->set-key" \
&& ret=0

    case $state in
    (set-key)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-config-help-set-key-command-$line[1]:"
        case $line[1] in
            (api-url)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(rauc)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__system__rauc_commands" \
"*::: :->rauc" \
&& ret=0

    case $state in
    (rauc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-rauc-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':url -- URL of the RAUC bundle:' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':url -- URL of the RAUC bundle:' \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__rauc__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-rauc-help-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-help-command-$line[1]:"
        case $line[1] in
            (config)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-help-config-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set-key)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__help__config__set-key_commands" \
"*::: :->set-key" \
&& ret=0

    case $state in
    (set-key)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-help-config-set-key-command-$line[1]:"
        case $line[1] in
            (api-url)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(rauc)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__system__help__rauc_commands" \
"*::: :->rauc" \
&& ret=0

    case $state in
    (rauc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-system-help-rauc-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(generate-completion)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::shell -- Shell type:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(modbus)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__modbus_commands" \
"*::: :->modbus" \
&& ret=0

    case $state in
    (modbus)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-command-$line[1]:"
        case $line[1] in
            (enable)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(disable)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__modbus__read_commands" \
"*::: :->read" \
&& ret=0

    case $state in
    (read)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-read-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
'-P+[Port]:PORT: ' \
'--port=[Port]:PORT: ' \
'-s+[Slave ID, if provided, the gateway mode is enabled Otherwise, it'\''s a single device and do not need to provide the slave ID]:SLAVE_ID: ' \
'--slave-id=[Slave ID, if provided, the gateway mode is enabled Otherwise, it'\''s a single device and do not need to provide the slave ID]:SLAVE_ID: ' \
'-f+[Read function code]:FUNCTION:(fc01 fc02 fc03 fc04)' \
'--function=[Read function code]:FUNCTION:(fc01 fc02 fc03 fc04)' \
'-n+[Count, depends on the function]:COUNT: ' \
'--count=[Count, depends on the function]:COUNT: ' \
'-p+[Position is used for bool data type to specify the bit position]:POSITION: ' \
'--position=[Position is used for bool data type to specify the bit position]:POSITION: ' \
'-T+[Data type decoding]:DATA_TYPE:(bool uint16 int16 uint32 int32 float32)' \
'--data-type=[Data type decoding]:DATA_TYPE:(bool uint16 int16 uint32 int32 float32)' \
'-w+[Word order endianess]:WORD_ORDER:(little big)' \
'--word-order=[Word order endianess]:WORD_ORDER:(little big)' \
'-b+[Byte order endianess]:BYTE_ORDER:(little big)' \
'--byte-order=[Byte order endianess]:BYTE_ORDER:(little big)' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':server -- Server address:' \
':address -- Register address:' \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
'-P+[Serial port]:PORT: ' \
'--port=[Serial port]:PORT: ' \
'-r+[Baudrate]:BAUDRATE: ' \
'--baudrate=[Baudrate]:BAUDRATE: ' \
'-u+[Data bits]:DATA_BITS: ' \
'--data-bits=[Data bits]:DATA_BITS: ' \
'-s+[Stop bits]:STOP_BITS: ' \
'--stop-bits=[Stop bits]:STOP_BITS: ' \
'-y+[Parity]:PARITY:(N O E)' \
'--parity=[Parity]:PARITY:(N O E)' \
'-f+[Read function code]:FUNCTION:(fc01 fc02 fc03 fc04)' \
'--function=[Read function code]:FUNCTION:(fc01 fc02 fc03 fc04)' \
'-n+[Count, depends on the function]:COUNT: ' \
'--count=[Count, depends on the function]:COUNT: ' \
'-p+[Position is used for bool data type to specify the bit position]:POSITION: ' \
'--position=[Position is used for bool data type to specify the bit position]:POSITION: ' \
'-T+[Data type decoding]:DATA_TYPE:(bool uint16 int16 uint32 int32 float32)' \
'--data-type=[Data type decoding]:DATA_TYPE:(bool uint16 int16 uint32 int32 float32)' \
'-w+[Word order endianess]:WORD_ORDER:(little big)' \
'--word-order=[Word order endianess]:WORD_ORDER:(little big)' \
'-b+[Byte order endianess]:BYTE_ORDER:(little big)' \
'--byte-order=[Byte order endianess]:BYTE_ORDER:(little big)' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':slave_id -- Slave ID:' \
':address -- Register address:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__modbus__read__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-read-help-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(write)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__modbus__write_commands" \
"*::: :->write" \
&& ret=0

    case $state in
    (write)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-write-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
'-P+[Port]:PORT: ' \
'--port=[Port]:PORT: ' \
'-s+[Slave ID, if provided, the gateway mode is enabled Otherwise, it'\''s a single device and do not need to provide the slave ID]:SLAVE_ID: ' \
'--slave-id=[Slave ID, if provided, the gateway mode is enabled Otherwise, it'\''s a single device and do not need to provide the slave ID]:SLAVE_ID: ' \
'-f+[Write function code]:FUNCTION:(fc05 fc06 fc16)' \
'--function=[Write function code]:FUNCTION:(fc05 fc06 fc16)' \
'-T+[Data type encoding]:DATA_TYPE:(uint16 int16)' \
'--data-type=[Data type encoding]:DATA_TYPE:(uint16 int16)' \
'-w+[Word order endianess]:WORD_ORDER:(little big)' \
'--word-order=[Word order endianess]:WORD_ORDER:(little big)' \
'-b+[Byte order endianess]:BYTE_ORDER:(little big)' \
'--byte-order=[Byte order endianess]:BYTE_ORDER:(little big)' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':server -- Server address:' \
':address -- Register address:' \
':value -- Value to write:' \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
'-P+[Serial port]:PORT: ' \
'--port=[Serial port]:PORT: ' \
'-r+[Baudrate]:BAUDRATE: ' \
'--baudrate=[Baudrate]:BAUDRATE: ' \
'-u+[Data bits]:DATA_BITS: ' \
'--data-bits=[Data bits]:DATA_BITS: ' \
'-s+[Stop bits]:STOP_BITS: ' \
'--stop-bits=[Stop bits]:STOP_BITS: ' \
'-y+[Parity]:PARITY:(N O E)' \
'--parity=[Parity]:PARITY:(N O E)' \
'-f+[Write function code]:FUNCTION:(fc05 fc06 fc16)' \
'--function=[Write function code]:FUNCTION:(fc05 fc06 fc16)' \
'-T+[Data type encoding]:DATA_TYPE:(uint16 int16)' \
'--data-type=[Data type encoding]:DATA_TYPE:(uint16 int16)' \
'-w+[Word order endianess]:WORD_ORDER:(little big)' \
'--word-order=[Word order endianess]:WORD_ORDER:(little big)' \
'-b+[Byte order endianess]:BYTE_ORDER:(little big)' \
'--byte-order=[Byte order endianess]:BYTE_ORDER:(little big)' \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':slave_id -- Slave ID:' \
':address -- Register address:' \
':value -- Value to write:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__modbus__write__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-write-help-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__modbus__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-help-command-$line[1]:"
        case $line[1] in
            (enable)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(disable)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__modbus__help__read_commands" \
"*::: :->read" \
&& ret=0

    case $state in
    (read)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-help-read-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(write)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__modbus__help__write_commands" \
"*::: :->write" \
&& ret=0

    case $state in
    (write)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-modbus-help-write-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(ip)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__ip_commands" \
"*::: :->ip" \
&& ret=0

    case $state in
    (ip)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-ip-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(values)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':ip -- IP address:' \
':port -- IP port:' \
':device_node_id -- Device node ID, e.g. 1\:1:' \
':property_node_id -- Property node ID, e.g. setpoint:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__ip__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-ip-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(values)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(xcom)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_commander-cli__xcom_commands" \
"*::: :->xcom" \
&& ret=0

    case $state in
    (xcom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-xcom-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'*-c+[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'*--ceos=[CEOS ID or ceos group name list]:CEOS ID and/or CEOS group name list: ' \
'-t+[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'--timeout=[Override command timeout(in seconds). If not set, the timeout is adjusted according to the command type]:TIMEOUT: ' \
'-v[Verbose mode]' \
'--verbose[Verbose mode]' \
'-d[Debug mode]' \
'--debug[Debug mode]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__xcom__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-xcom-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-command-$line[1]:"
        case $line[1] in
            (ping)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(system-status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(reboot)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(public-ip)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rauc)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__rauc_commands" \
"*::: :->rauc" \
&& ret=0

    case $state in
    (rauc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-rauc-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(rssh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(core)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__core_commands" \
"*::: :->core" \
&& ret=0

    case $state in
    (core)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-core-command-$line[1]:"
        case $line[1] in
            (profiling-timings)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(profiling-counters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sync-request)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(identity)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(devices)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rules)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(scheduler-events)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-dhls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-lhls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(latest-rthls)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update-model)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(queues-stats)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(download)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__download_commands" \
"*::: :->download" \
&& ret=0

    case $state in
    (download)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-download-command-$line[1]:"
        case $line[1] in
            (database)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(custom)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zwave_commands" \
"*::: :->zwave" \
&& ret=0

    case $state in
    (zwave)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zwave-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ping-node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get-nodes-status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rebuild-node-routes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get-node-neighbors)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(firmware-update-ota)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(re-interview-node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(write-value)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(soft-reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(lifeline-health)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zwave__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zwave-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee_commands" \
"*::: :->zigbee" \
&& ret=0

    case $state in
    (zigbee)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-command-$line[1]:"
        case $line[1] in
            (device)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee__device_commands" \
"*::: :->device" \
&& ret=0

    case $state in
    (device)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-device-command-$line[1]:"
        case $line[1] in
            (remove)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(clear-table)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(zcl)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee__zcl_commands" \
"*::: :->zcl" \
&& ret=0

    case $state in
    (zcl)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-zcl-command-$line[1]:"
        case $line[1] in
            (read)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(write)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(network)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee__network_commands" \
"*::: :->network" \
&& ret=0

    case $state in
    (network)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-network-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(leave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(open)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(close)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(bindings)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee__bindings_commands" \
"*::: :->bindings" \
&& ret=0

    case $state in
    (bindings)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-bindings-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list-all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__zigbee__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-zigbee-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(radio)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__radio_commands" \
"*::: :->radio" \
&& ret=0

    case $state in
    (radio)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-radio-command-$line[1]:"
        case $line[1] in
            (neighbors)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__radio__neighbors_commands" \
"*::: :->neighbors" \
&& ret=0

    case $state in
    (neighbors)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-radio-neighbors-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__radio__neighbors__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-radio-neighbors-get-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zigbee)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(zwave)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(system)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__system_commands" \
"*::: :->system" \
&& ret=0

    case $state in
    (system)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-system-command-$line[1]:"
        case $line[1] in
            (config)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__system__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-system-config-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set-key)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__system__config__set-key_commands" \
"*::: :->set-key" \
&& ret=0

    case $state in
    (set-key)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-system-config-set-key-command-$line[1]:"
        case $line[1] in
            (api-url)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(rauc)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__system__rauc_commands" \
"*::: :->rauc" \
&& ret=0

    case $state in
    (rauc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-system-rauc-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(generate-completion)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(modbus)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__modbus_commands" \
"*::: :->modbus" \
&& ret=0

    case $state in
    (modbus)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-modbus-command-$line[1]:"
        case $line[1] in
            (enable)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(disable)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__modbus__read_commands" \
"*::: :->read" \
&& ret=0

    case $state in
    (read)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-modbus-read-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(write)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__modbus__write_commands" \
"*::: :->write" \
&& ret=0

    case $state in
    (write)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-modbus-write-command-$line[1]:"
        case $line[1] in
            (tcp)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rtu)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(ip)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__ip_commands" \
"*::: :->ip" \
&& ret=0

    case $state in
    (ip)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-ip-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(values)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(read)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(xcom)
_arguments "${_arguments_options[@]}" : \
":: :_commander-cli__help__xcom_commands" \
"*::: :->xcom" \
&& ret=0

    case $state in
    (xcom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:commander-cli-help-xcom-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_commander-cli_commands] )) ||
_commander-cli_commands() {
    local commands; commands=(
'ping:Ping' \
'version:Version' \
'system-status:System Status' \
'neighbors:List other Céos on the network' \
'status:\`SnC\` Céos status' \
'reboot:Reboot the Céos' \
'public-ip:Public IP address (v4)' \
'rauc:RAUC Update' \
'rssh:Rssh' \
'core:Core' \
'download:Download assets' \
'zwave:Z-Wave' \
'zigbee:Zigbee' \
'radio:Radio (radio-daemon)' \
'system:System (system-daemon)' \
'generate-completion:Generate completion script' \
'update:Update commander-cli' \
'modbus:Modbus' \
'ip:Ip' \
'xcom:Xcom' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli commands' commands "$@"
}
(( $+functions[_commander-cli__core_commands] )) ||
_commander-cli__core_commands() {
    local commands; commands=(
'profiling-timings:Profiling timings' \
'profiling-counters:Profiling counters' \
'sync-request:Profiling request' \
'identity:Get identity' \
'devices:Get devices' \
'rules:Get rules' \
'scheduler-events:Get scheduler events' \
'latest-dhls:Get all latest DHLs for each device' \
'latest-lhls:Get all latest LHLs for each location' \
'latest-rthls:Get all latest RTHLs for each rule' \
'update-model:Update the model of a device' \
'queues-stats:Get transmit queues stats' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli core commands' commands "$@"
}
(( $+functions[_commander-cli__core__devices_commands] )) ||
_commander-cli__core__devices_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core devices commands' commands "$@"
}
(( $+functions[_commander-cli__core__help_commands] )) ||
_commander-cli__core__help_commands() {
    local commands; commands=(
'profiling-timings:Profiling timings' \
'profiling-counters:Profiling counters' \
'sync-request:Profiling request' \
'identity:Get identity' \
'devices:Get devices' \
'rules:Get rules' \
'scheduler-events:Get scheduler events' \
'latest-dhls:Get all latest DHLs for each device' \
'latest-lhls:Get all latest LHLs for each location' \
'latest-rthls:Get all latest RTHLs for each rule' \
'update-model:Update the model of a device' \
'queues-stats:Get transmit queues stats' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli core help commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__devices_commands] )) ||
_commander-cli__core__help__devices_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help devices commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__help_commands] )) ||
_commander-cli__core__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help help commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__identity_commands] )) ||
_commander-cli__core__help__identity_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help identity commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__latest-dhls_commands] )) ||
_commander-cli__core__help__latest-dhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help latest-dhls commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__latest-lhls_commands] )) ||
_commander-cli__core__help__latest-lhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help latest-lhls commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__latest-rthls_commands] )) ||
_commander-cli__core__help__latest-rthls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help latest-rthls commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__profiling-counters_commands] )) ||
_commander-cli__core__help__profiling-counters_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help profiling-counters commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__profiling-timings_commands] )) ||
_commander-cli__core__help__profiling-timings_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help profiling-timings commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__queues-stats_commands] )) ||
_commander-cli__core__help__queues-stats_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help queues-stats commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__rules_commands] )) ||
_commander-cli__core__help__rules_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help rules commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__scheduler-events_commands] )) ||
_commander-cli__core__help__scheduler-events_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help scheduler-events commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__sync-request_commands] )) ||
_commander-cli__core__help__sync-request_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help sync-request commands' commands "$@"
}
(( $+functions[_commander-cli__core__help__update-model_commands] )) ||
_commander-cli__core__help__update-model_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core help update-model commands' commands "$@"
}
(( $+functions[_commander-cli__core__identity_commands] )) ||
_commander-cli__core__identity_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core identity commands' commands "$@"
}
(( $+functions[_commander-cli__core__latest-dhls_commands] )) ||
_commander-cli__core__latest-dhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core latest-dhls commands' commands "$@"
}
(( $+functions[_commander-cli__core__latest-lhls_commands] )) ||
_commander-cli__core__latest-lhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core latest-lhls commands' commands "$@"
}
(( $+functions[_commander-cli__core__latest-rthls_commands] )) ||
_commander-cli__core__latest-rthls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core latest-rthls commands' commands "$@"
}
(( $+functions[_commander-cli__core__profiling-counters_commands] )) ||
_commander-cli__core__profiling-counters_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core profiling-counters commands' commands "$@"
}
(( $+functions[_commander-cli__core__profiling-timings_commands] )) ||
_commander-cli__core__profiling-timings_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core profiling-timings commands' commands "$@"
}
(( $+functions[_commander-cli__core__queues-stats_commands] )) ||
_commander-cli__core__queues-stats_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core queues-stats commands' commands "$@"
}
(( $+functions[_commander-cli__core__rules_commands] )) ||
_commander-cli__core__rules_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core rules commands' commands "$@"
}
(( $+functions[_commander-cli__core__scheduler-events_commands] )) ||
_commander-cli__core__scheduler-events_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core scheduler-events commands' commands "$@"
}
(( $+functions[_commander-cli__core__sync-request_commands] )) ||
_commander-cli__core__sync-request_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core sync-request commands' commands "$@"
}
(( $+functions[_commander-cli__core__update-model_commands] )) ||
_commander-cli__core__update-model_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli core update-model commands' commands "$@"
}
(( $+functions[_commander-cli__download_commands] )) ||
_commander-cli__download_commands() {
    local commands; commands=(
'database:Database' \
'config:Config' \
'custom:Custom paths' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli download commands' commands "$@"
}
(( $+functions[_commander-cli__download__config_commands] )) ||
_commander-cli__download__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download config commands' commands "$@"
}
(( $+functions[_commander-cli__download__custom_commands] )) ||
_commander-cli__download__custom_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download custom commands' commands "$@"
}
(( $+functions[_commander-cli__download__database_commands] )) ||
_commander-cli__download__database_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download database commands' commands "$@"
}
(( $+functions[_commander-cli__download__help_commands] )) ||
_commander-cli__download__help_commands() {
    local commands; commands=(
'database:Database' \
'config:Config' \
'custom:Custom paths' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli download help commands' commands "$@"
}
(( $+functions[_commander-cli__download__help__config_commands] )) ||
_commander-cli__download__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download help config commands' commands "$@"
}
(( $+functions[_commander-cli__download__help__custom_commands] )) ||
_commander-cli__download__help__custom_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download help custom commands' commands "$@"
}
(( $+functions[_commander-cli__download__help__database_commands] )) ||
_commander-cli__download__help__database_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download help database commands' commands "$@"
}
(( $+functions[_commander-cli__download__help__help_commands] )) ||
_commander-cli__download__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli download help help commands' commands "$@"
}
(( $+functions[_commander-cli__generate-completion_commands] )) ||
_commander-cli__generate-completion_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli generate-completion commands' commands "$@"
}
(( $+functions[_commander-cli__help_commands] )) ||
_commander-cli__help_commands() {
    local commands; commands=(
'ping:Ping' \
'version:Version' \
'system-status:System Status' \
'neighbors:List other Céos on the network' \
'status:\`SnC\` Céos status' \
'reboot:Reboot the Céos' \
'public-ip:Public IP address (v4)' \
'rauc:RAUC Update' \
'rssh:Rssh' \
'core:Core' \
'download:Download assets' \
'zwave:Z-Wave' \
'zigbee:Zigbee' \
'radio:Radio (radio-daemon)' \
'system:System (system-daemon)' \
'generate-completion:Generate completion script' \
'update:Update commander-cli' \
'modbus:Modbus' \
'ip:Ip' \
'xcom:Xcom' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli help commands' commands "$@"
}
(( $+functions[_commander-cli__help__core_commands] )) ||
_commander-cli__help__core_commands() {
    local commands; commands=(
'profiling-timings:Profiling timings' \
'profiling-counters:Profiling counters' \
'sync-request:Profiling request' \
'identity:Get identity' \
'devices:Get devices' \
'rules:Get rules' \
'scheduler-events:Get scheduler events' \
'latest-dhls:Get all latest DHLs for each device' \
'latest-lhls:Get all latest LHLs for each location' \
'latest-rthls:Get all latest RTHLs for each rule' \
'update-model:Update the model of a device' \
'queues-stats:Get transmit queues stats' \
    )
    _describe -t commands 'commander-cli help core commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__devices_commands] )) ||
_commander-cli__help__core__devices_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core devices commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__identity_commands] )) ||
_commander-cli__help__core__identity_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core identity commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__latest-dhls_commands] )) ||
_commander-cli__help__core__latest-dhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core latest-dhls commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__latest-lhls_commands] )) ||
_commander-cli__help__core__latest-lhls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core latest-lhls commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__latest-rthls_commands] )) ||
_commander-cli__help__core__latest-rthls_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core latest-rthls commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__profiling-counters_commands] )) ||
_commander-cli__help__core__profiling-counters_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core profiling-counters commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__profiling-timings_commands] )) ||
_commander-cli__help__core__profiling-timings_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core profiling-timings commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__queues-stats_commands] )) ||
_commander-cli__help__core__queues-stats_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core queues-stats commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__rules_commands] )) ||
_commander-cli__help__core__rules_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core rules commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__scheduler-events_commands] )) ||
_commander-cli__help__core__scheduler-events_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core scheduler-events commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__sync-request_commands] )) ||
_commander-cli__help__core__sync-request_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core sync-request commands' commands "$@"
}
(( $+functions[_commander-cli__help__core__update-model_commands] )) ||
_commander-cli__help__core__update-model_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help core update-model commands' commands "$@"
}
(( $+functions[_commander-cli__help__download_commands] )) ||
_commander-cli__help__download_commands() {
    local commands; commands=(
'database:Database' \
'config:Config' \
'custom:Custom paths' \
    )
    _describe -t commands 'commander-cli help download commands' commands "$@"
}
(( $+functions[_commander-cli__help__download__config_commands] )) ||
_commander-cli__help__download__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help download config commands' commands "$@"
}
(( $+functions[_commander-cli__help__download__custom_commands] )) ||
_commander-cli__help__download__custom_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help download custom commands' commands "$@"
}
(( $+functions[_commander-cli__help__download__database_commands] )) ||
_commander-cli__help__download__database_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help download database commands' commands "$@"
}
(( $+functions[_commander-cli__help__generate-completion_commands] )) ||
_commander-cli__help__generate-completion_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help generate-completion commands' commands "$@"
}
(( $+functions[_commander-cli__help__help_commands] )) ||
_commander-cli__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help help commands' commands "$@"
}
(( $+functions[_commander-cli__help__ip_commands] )) ||
_commander-cli__help__ip_commands() {
    local commands; commands=(
'status:' \
'values:' \
'config:' \
'read:' \
    )
    _describe -t commands 'commander-cli help ip commands' commands "$@"
}
(( $+functions[_commander-cli__help__ip__config_commands] )) ||
_commander-cli__help__ip__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help ip config commands' commands "$@"
}
(( $+functions[_commander-cli__help__ip__read_commands] )) ||
_commander-cli__help__ip__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help ip read commands' commands "$@"
}
(( $+functions[_commander-cli__help__ip__status_commands] )) ||
_commander-cli__help__ip__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help ip status commands' commands "$@"
}
(( $+functions[_commander-cli__help__ip__values_commands] )) ||
_commander-cli__help__ip__values_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help ip values commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus_commands] )) ||
_commander-cli__help__modbus_commands() {
    local commands; commands=(
'enable:' \
'disable:' \
'status:' \
'config:' \
'read:' \
'write:' \
    )
    _describe -t commands 'commander-cli help modbus commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__config_commands] )) ||
_commander-cli__help__modbus__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus config commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__disable_commands] )) ||
_commander-cli__help__modbus__disable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus disable commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__enable_commands] )) ||
_commander-cli__help__modbus__enable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus enable commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__read_commands] )) ||
_commander-cli__help__modbus__read_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
    )
    _describe -t commands 'commander-cli help modbus read commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__read__rtu_commands] )) ||
_commander-cli__help__modbus__read__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus read rtu commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__read__tcp_commands] )) ||
_commander-cli__help__modbus__read__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus read tcp commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__status_commands] )) ||
_commander-cli__help__modbus__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus status commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__write_commands] )) ||
_commander-cli__help__modbus__write_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
    )
    _describe -t commands 'commander-cli help modbus write commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__write__rtu_commands] )) ||
_commander-cli__help__modbus__write__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus write rtu commands' commands "$@"
}
(( $+functions[_commander-cli__help__modbus__write__tcp_commands] )) ||
_commander-cli__help__modbus__write__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help modbus write tcp commands' commands "$@"
}
(( $+functions[_commander-cli__help__neighbors_commands] )) ||
_commander-cli__help__neighbors_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__help__ping_commands] )) ||
_commander-cli__help__ping_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help ping commands' commands "$@"
}
(( $+functions[_commander-cli__help__public-ip_commands] )) ||
_commander-cli__help__public-ip_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help public-ip commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio_commands] )) ||
_commander-cli__help__radio_commands() {
    local commands; commands=(
'neighbors:' \
    )
    _describe -t commands 'commander-cli help radio commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors_commands] )) ||
_commander-cli__help__radio__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli help radio neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors__get_commands] )) ||
_commander-cli__help__radio__neighbors__get_commands() {
    local commands; commands=(
'all:Get neighbors for all protocols' \
'zigbee:Get neighbors for Zigbee protocol' \
'zwave:Get neighbors for Zwave protocol' \
    )
    _describe -t commands 'commander-cli help radio neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors__get__all_commands] )) ||
_commander-cli__help__radio__neighbors__get__all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help radio neighbors get all commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors__get__zigbee_commands] )) ||
_commander-cli__help__radio__neighbors__get__zigbee_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help radio neighbors get zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors__get__zwave_commands] )) ||
_commander-cli__help__radio__neighbors__get__zwave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help radio neighbors get zwave commands' commands "$@"
}
(( $+functions[_commander-cli__help__radio__neighbors__refresh_commands] )) ||
_commander-cli__help__radio__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help radio neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__help__rauc_commands] )) ||
_commander-cli__help__rauc_commands() {
    local commands; commands=(
'check:Check if bundle is accessible' \
'install:Install bundle and reboot' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
    )
    _describe -t commands 'commander-cli help rauc commands' commands "$@"
}
(( $+functions[_commander-cli__help__rauc__check_commands] )) ||
_commander-cli__help__rauc__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help rauc check commands' commands "$@"
}
(( $+functions[_commander-cli__help__rauc__install_commands] )) ||
_commander-cli__help__rauc__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help rauc install commands' commands "$@"
}
(( $+functions[_commander-cli__help__rauc__rollback_commands] )) ||
_commander-cli__help__rauc__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help rauc rollback commands' commands "$@"
}
(( $+functions[_commander-cli__help__rauc__status_commands] )) ||
_commander-cli__help__rauc__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help rauc status commands' commands "$@"
}
(( $+functions[_commander-cli__help__reboot_commands] )) ||
_commander-cli__help__reboot_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help reboot commands' commands "$@"
}
(( $+functions[_commander-cli__help__rssh_commands] )) ||
_commander-cli__help__rssh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help rssh commands' commands "$@"
}
(( $+functions[_commander-cli__help__status_commands] )) ||
_commander-cli__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help status commands' commands "$@"
}
(( $+functions[_commander-cli__help__system_commands] )) ||
_commander-cli__help__system_commands() {
    local commands; commands=(
'config:Config management' \
'rauc:RAUC management' \
    )
    _describe -t commands 'commander-cli help system commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__config_commands] )) ||
_commander-cli__help__system__config_commands() {
    local commands; commands=(
'get:Get config' \
'set-key:Set config' \
'reset:Reset to production' \
    )
    _describe -t commands 'commander-cli help system config commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__config__get_commands] )) ||
_commander-cli__help__system__config__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system config get commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__config__reset_commands] )) ||
_commander-cli__help__system__config__reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system config reset commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__config__set-key_commands] )) ||
_commander-cli__help__system__config__set-key_commands() {
    local commands; commands=(
'api-url:' \
    )
    _describe -t commands 'commander-cli help system config set-key commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__config__set-key__api-url_commands] )) ||
_commander-cli__help__system__config__set-key__api-url_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system config set-key api-url commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__rauc_commands] )) ||
_commander-cli__help__system__rauc_commands() {
    local commands; commands=(
'install:Install bundle and reboot' \
'check:Check if bundle is accessible' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
    )
    _describe -t commands 'commander-cli help system rauc commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__rauc__check_commands] )) ||
_commander-cli__help__system__rauc__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system rauc check commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__rauc__install_commands] )) ||
_commander-cli__help__system__rauc__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system rauc install commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__rauc__rollback_commands] )) ||
_commander-cli__help__system__rauc__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system rauc rollback commands' commands "$@"
}
(( $+functions[_commander-cli__help__system__rauc__status_commands] )) ||
_commander-cli__help__system__rauc__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system rauc status commands' commands "$@"
}
(( $+functions[_commander-cli__help__system-status_commands] )) ||
_commander-cli__help__system-status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help system-status commands' commands "$@"
}
(( $+functions[_commander-cli__help__update_commands] )) ||
_commander-cli__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help update commands' commands "$@"
}
(( $+functions[_commander-cli__help__version_commands] )) ||
_commander-cli__help__version_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help version commands' commands "$@"
}
(( $+functions[_commander-cli__help__xcom_commands] )) ||
_commander-cli__help__xcom_commands() {
    local commands; commands=(
'status:' \
'config:' \
    )
    _describe -t commands 'commander-cli help xcom commands' commands "$@"
}
(( $+functions[_commander-cli__help__xcom__config_commands] )) ||
_commander-cli__help__xcom__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help xcom config commands' commands "$@"
}
(( $+functions[_commander-cli__help__xcom__status_commands] )) ||
_commander-cli__help__xcom__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help xcom status commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee_commands] )) ||
_commander-cli__help__zigbee_commands() {
    local commands; commands=(
'device:' \
'zcl:' \
'network:' \
'bindings:' \
'neighbors:' \
'status:' \
    )
    _describe -t commands 'commander-cli help zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__bindings_commands] )) ||
_commander-cli__help__zigbee__bindings_commands() {
    local commands; commands=(
'list:List the bindings of a device' \
'list-all:List all bindings' \
'create:Create a binding' \
    )
    _describe -t commands 'commander-cli help zigbee bindings commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__bindings__create_commands] )) ||
_commander-cli__help__zigbee__bindings__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee bindings create commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__bindings__list_commands] )) ||
_commander-cli__help__zigbee__bindings__list_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee bindings list commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__bindings__list-all_commands] )) ||
_commander-cli__help__zigbee__bindings__list-all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee bindings list-all commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__device_commands] )) ||
_commander-cli__help__zigbee__device_commands() {
    local commands; commands=(
'remove:Remove a device from controller table' \
'clear-table:Clear controller table' \
    )
    _describe -t commands 'commander-cli help zigbee device commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__device__clear-table_commands] )) ||
_commander-cli__help__zigbee__device__clear-table_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee device clear-table commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__device__remove_commands] )) ||
_commander-cli__help__zigbee__device__remove_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee device remove commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__neighbors_commands] )) ||
_commander-cli__help__zigbee__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli help zigbee neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__neighbors__get_commands] )) ||
_commander-cli__help__zigbee__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__neighbors__refresh_commands] )) ||
_commander-cli__help__zigbee__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__network_commands] )) ||
_commander-cli__help__zigbee__network_commands() {
    local commands; commands=(
'create:Create a network (centralized)' \
'leave:Leave the current network and clear the device table' \
'open:Opens a network for joining, no install code, broadcast permit join for 180s' \
'close:Closes a network for joins and rejoins' \
    )
    _describe -t commands 'commander-cli help zigbee network commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__network__close_commands] )) ||
_commander-cli__help__zigbee__network__close_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee network close commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__network__create_commands] )) ||
_commander-cli__help__zigbee__network__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee network create commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__network__leave_commands] )) ||
_commander-cli__help__zigbee__network__leave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee network leave commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__network__open_commands] )) ||
_commander-cli__help__zigbee__network__open_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee network open commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__status_commands] )) ||
_commander-cli__help__zigbee__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee status commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__zcl_commands] )) ||
_commander-cli__help__zigbee__zcl_commands() {
    local commands; commands=(
'read:Read an attribute' \
'write:Write an attribute' \
    )
    _describe -t commands 'commander-cli help zigbee zcl commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__zcl__read_commands] )) ||
_commander-cli__help__zigbee__zcl__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee zcl read commands' commands "$@"
}
(( $+functions[_commander-cli__help__zigbee__zcl__write_commands] )) ||
_commander-cli__help__zigbee__zcl__write_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zigbee zcl write commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave_commands] )) ||
_commander-cli__help__zwave_commands() {
    local commands; commands=(
'status:Get Z-Wave status' \
'ping-node:Ping node' \
'get-nodes-status:Get status of one or more nodes' \
'rebuild-node-routes:Rebuild node routes' \
'get-node-neighbors:List node’s neighbors' \
'firmware-update-ota:Firwmare update OTA' \
're-interview-node:Re-interview node, a.k.a refreshInfo topic' \
'write-value:Write value to a node' \
'soft-reset:Soft reset' \
'lifeline-health:' \
'neighbors:Neighbors' \
    )
    _describe -t commands 'commander-cli help zwave commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__firmware-update-ota_commands] )) ||
_commander-cli__help__zwave__firmware-update-ota_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave firmware-update-ota commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__get-node-neighbors_commands] )) ||
_commander-cli__help__zwave__get-node-neighbors_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave get-node-neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__get-nodes-status_commands] )) ||
_commander-cli__help__zwave__get-nodes-status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave get-nodes-status commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__lifeline-health_commands] )) ||
_commander-cli__help__zwave__lifeline-health_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave lifeline-health commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__neighbors_commands] )) ||
_commander-cli__help__zwave__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli help zwave neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__neighbors__get_commands] )) ||
_commander-cli__help__zwave__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__neighbors__refresh_commands] )) ||
_commander-cli__help__zwave__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__ping-node_commands] )) ||
_commander-cli__help__zwave__ping-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave ping-node commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__re-interview-node_commands] )) ||
_commander-cli__help__zwave__re-interview-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave re-interview-node commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__rebuild-node-routes_commands] )) ||
_commander-cli__help__zwave__rebuild-node-routes_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave rebuild-node-routes commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__soft-reset_commands] )) ||
_commander-cli__help__zwave__soft-reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave soft-reset commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__status_commands] )) ||
_commander-cli__help__zwave__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave status commands' commands "$@"
}
(( $+functions[_commander-cli__help__zwave__write-value_commands] )) ||
_commander-cli__help__zwave__write-value_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli help zwave write-value commands' commands "$@"
}
(( $+functions[_commander-cli__ip_commands] )) ||
_commander-cli__ip_commands() {
    local commands; commands=(
'status:' \
'values:' \
'config:' \
'read:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli ip commands' commands "$@"
}
(( $+functions[_commander-cli__ip__config_commands] )) ||
_commander-cli__ip__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip config commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help_commands] )) ||
_commander-cli__ip__help_commands() {
    local commands; commands=(
'status:' \
'values:' \
'config:' \
'read:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli ip help commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help__config_commands] )) ||
_commander-cli__ip__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip help config commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help__help_commands] )) ||
_commander-cli__ip__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip help help commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help__read_commands] )) ||
_commander-cli__ip__help__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip help read commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help__status_commands] )) ||
_commander-cli__ip__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip help status commands' commands "$@"
}
(( $+functions[_commander-cli__ip__help__values_commands] )) ||
_commander-cli__ip__help__values_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip help values commands' commands "$@"
}
(( $+functions[_commander-cli__ip__read_commands] )) ||
_commander-cli__ip__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip read commands' commands "$@"
}
(( $+functions[_commander-cli__ip__status_commands] )) ||
_commander-cli__ip__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip status commands' commands "$@"
}
(( $+functions[_commander-cli__ip__values_commands] )) ||
_commander-cli__ip__values_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ip values commands' commands "$@"
}
(( $+functions[_commander-cli__modbus_commands] )) ||
_commander-cli__modbus_commands() {
    local commands; commands=(
'enable:' \
'disable:' \
'status:' \
'config:' \
'read:' \
'write:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__config_commands] )) ||
_commander-cli__modbus__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus config commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__disable_commands] )) ||
_commander-cli__modbus__disable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus disable commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__enable_commands] )) ||
_commander-cli__modbus__enable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus enable commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help_commands] )) ||
_commander-cli__modbus__help_commands() {
    local commands; commands=(
'enable:' \
'disable:' \
'status:' \
'config:' \
'read:' \
'write:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__config_commands] )) ||
_commander-cli__modbus__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help config commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__disable_commands] )) ||
_commander-cli__modbus__help__disable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help disable commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__enable_commands] )) ||
_commander-cli__modbus__help__enable_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help enable commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__help_commands] )) ||
_commander-cli__modbus__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__read_commands] )) ||
_commander-cli__modbus__help__read_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
    )
    _describe -t commands 'commander-cli modbus help read commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__read__rtu_commands] )) ||
_commander-cli__modbus__help__read__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help read rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__read__tcp_commands] )) ||
_commander-cli__modbus__help__read__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help read tcp commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__status_commands] )) ||
_commander-cli__modbus__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help status commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__write_commands] )) ||
_commander-cli__modbus__help__write_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
    )
    _describe -t commands 'commander-cli modbus help write commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__write__rtu_commands] )) ||
_commander-cli__modbus__help__write__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help write rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__help__write__tcp_commands] )) ||
_commander-cli__modbus__help__write__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus help write tcp commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read_commands] )) ||
_commander-cli__modbus__read_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus read commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__help_commands] )) ||
_commander-cli__modbus__read__help_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus read help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__help__help_commands] )) ||
_commander-cli__modbus__read__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus read help help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__help__rtu_commands] )) ||
_commander-cli__modbus__read__help__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus read help rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__help__tcp_commands] )) ||
_commander-cli__modbus__read__help__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus read help tcp commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__rtu_commands] )) ||
_commander-cli__modbus__read__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus read rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__read__tcp_commands] )) ||
_commander-cli__modbus__read__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus read tcp commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__status_commands] )) ||
_commander-cli__modbus__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus status commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write_commands] )) ||
_commander-cli__modbus__write_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus write commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__help_commands] )) ||
_commander-cli__modbus__write__help_commands() {
    local commands; commands=(
'tcp:' \
'rtu:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli modbus write help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__help__help_commands] )) ||
_commander-cli__modbus__write__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus write help help commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__help__rtu_commands] )) ||
_commander-cli__modbus__write__help__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus write help rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__help__tcp_commands] )) ||
_commander-cli__modbus__write__help__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus write help tcp commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__rtu_commands] )) ||
_commander-cli__modbus__write__rtu_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus write rtu commands' commands "$@"
}
(( $+functions[_commander-cli__modbus__write__tcp_commands] )) ||
_commander-cli__modbus__write__tcp_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli modbus write tcp commands' commands "$@"
}
(( $+functions[_commander-cli__neighbors_commands] )) ||
_commander-cli__neighbors_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__ping_commands] )) ||
_commander-cli__ping_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli ping commands' commands "$@"
}
(( $+functions[_commander-cli__public-ip_commands] )) ||
_commander-cli__public-ip_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli public-ip commands' commands "$@"
}
(( $+functions[_commander-cli__radio_commands] )) ||
_commander-cli__radio_commands() {
    local commands; commands=(
'neighbors:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help_commands] )) ||
_commander-cli__radio__help_commands() {
    local commands; commands=(
'neighbors:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__help_commands] )) ||
_commander-cli__radio__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio help help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors_commands] )) ||
_commander-cli__radio__help__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli radio help neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors__get_commands] )) ||
_commander-cli__radio__help__neighbors__get_commands() {
    local commands; commands=(
'all:Get neighbors for all protocols' \
'zigbee:Get neighbors for Zigbee protocol' \
'zwave:Get neighbors for Zwave protocol' \
    )
    _describe -t commands 'commander-cli radio help neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors__get__all_commands] )) ||
_commander-cli__radio__help__neighbors__get__all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio help neighbors get all commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors__get__zigbee_commands] )) ||
_commander-cli__radio__help__neighbors__get__zigbee_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio help neighbors get zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors__get__zwave_commands] )) ||
_commander-cli__radio__help__neighbors__get__zwave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio help neighbors get zwave commands' commands "$@"
}
(( $+functions[_commander-cli__radio__help__neighbors__refresh_commands] )) ||
_commander-cli__radio__help__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio help neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors_commands] )) ||
_commander-cli__radio__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get_commands] )) ||
_commander-cli__radio__neighbors__get_commands() {
    local commands; commands=(
'all:Get neighbors for all protocols' \
'zigbee:Get neighbors for Zigbee protocol' \
'zwave:Get neighbors for Zwave protocol' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__all_commands] )) ||
_commander-cli__radio__neighbors__get__all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get all commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__help_commands] )) ||
_commander-cli__radio__neighbors__get__help_commands() {
    local commands; commands=(
'all:Get neighbors for all protocols' \
'zigbee:Get neighbors for Zigbee protocol' \
'zwave:Get neighbors for Zwave protocol' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio neighbors get help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__help__all_commands] )) ||
_commander-cli__radio__neighbors__get__help__all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get help all commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__help__help_commands] )) ||
_commander-cli__radio__neighbors__get__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get help help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__help__zigbee_commands] )) ||
_commander-cli__radio__neighbors__get__help__zigbee_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get help zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__help__zwave_commands] )) ||
_commander-cli__radio__neighbors__get__help__zwave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get help zwave commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__zigbee_commands] )) ||
_commander-cli__radio__neighbors__get__zigbee_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__get__zwave_commands] )) ||
_commander-cli__radio__neighbors__get__zwave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors get zwave commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help_commands] )) ||
_commander-cli__radio__neighbors__help_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli radio neighbors help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__get_commands] )) ||
_commander-cli__radio__neighbors__help__get_commands() {
    local commands; commands=(
'all:Get neighbors for all protocols' \
'zigbee:Get neighbors for Zigbee protocol' \
'zwave:Get neighbors for Zwave protocol' \
    )
    _describe -t commands 'commander-cli radio neighbors help get commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__get__all_commands] )) ||
_commander-cli__radio__neighbors__help__get__all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors help get all commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__get__zigbee_commands] )) ||
_commander-cli__radio__neighbors__help__get__zigbee_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors help get zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__get__zwave_commands] )) ||
_commander-cli__radio__neighbors__help__get__zwave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors help get zwave commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__help_commands] )) ||
_commander-cli__radio__neighbors__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors help help commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__help__refresh_commands] )) ||
_commander-cli__radio__neighbors__help__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors help refresh commands' commands "$@"
}
(( $+functions[_commander-cli__radio__neighbors__refresh_commands] )) ||
_commander-cli__radio__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli radio neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__rauc_commands] )) ||
_commander-cli__rauc_commands() {
    local commands; commands=(
'check:Check if bundle is accessible' \
'install:Install bundle and reboot' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli rauc commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__check_commands] )) ||
_commander-cli__rauc__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc check commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help_commands] )) ||
_commander-cli__rauc__help_commands() {
    local commands; commands=(
'check:Check if bundle is accessible' \
'install:Install bundle and reboot' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli rauc help commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help__check_commands] )) ||
_commander-cli__rauc__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc help check commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help__help_commands] )) ||
_commander-cli__rauc__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc help help commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help__install_commands] )) ||
_commander-cli__rauc__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc help install commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help__rollback_commands] )) ||
_commander-cli__rauc__help__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc help rollback commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__help__status_commands] )) ||
_commander-cli__rauc__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc help status commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__install_commands] )) ||
_commander-cli__rauc__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc install commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__rollback_commands] )) ||
_commander-cli__rauc__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc rollback commands' commands "$@"
}
(( $+functions[_commander-cli__rauc__status_commands] )) ||
_commander-cli__rauc__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rauc status commands' commands "$@"
}
(( $+functions[_commander-cli__reboot_commands] )) ||
_commander-cli__reboot_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli reboot commands' commands "$@"
}
(( $+functions[_commander-cli__rssh_commands] )) ||
_commander-cli__rssh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli rssh commands' commands "$@"
}
(( $+functions[_commander-cli__status_commands] )) ||
_commander-cli__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli status commands' commands "$@"
}
(( $+functions[_commander-cli__system_commands] )) ||
_commander-cli__system_commands() {
    local commands; commands=(
'config:Config management' \
'rauc:RAUC management' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system commands' commands "$@"
}
(( $+functions[_commander-cli__system__config_commands] )) ||
_commander-cli__system__config_commands() {
    local commands; commands=(
'get:Get config' \
'set-key:Set config' \
'reset:Reset to production' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system config commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__get_commands] )) ||
_commander-cli__system__config__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config get commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help_commands] )) ||
_commander-cli__system__config__help_commands() {
    local commands; commands=(
'get:Get config' \
'set-key:Set config' \
'reset:Reset to production' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system config help commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help__get_commands] )) ||
_commander-cli__system__config__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config help get commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help__help_commands] )) ||
_commander-cli__system__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config help help commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help__reset_commands] )) ||
_commander-cli__system__config__help__reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config help reset commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help__set-key_commands] )) ||
_commander-cli__system__config__help__set-key_commands() {
    local commands; commands=(
'api-url:' \
    )
    _describe -t commands 'commander-cli system config help set-key commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__help__set-key__api-url_commands] )) ||
_commander-cli__system__config__help__set-key__api-url_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config help set-key api-url commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__reset_commands] )) ||
_commander-cli__system__config__reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config reset commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__set-key_commands] )) ||
_commander-cli__system__config__set-key_commands() {
    local commands; commands=(
'api-url:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system config set-key commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__set-key__api-url_commands] )) ||
_commander-cli__system__config__set-key__api-url_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config set-key api-url commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__set-key__help_commands] )) ||
_commander-cli__system__config__set-key__help_commands() {
    local commands; commands=(
'api-url:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system config set-key help commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__set-key__help__api-url_commands] )) ||
_commander-cli__system__config__set-key__help__api-url_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config set-key help api-url commands' commands "$@"
}
(( $+functions[_commander-cli__system__config__set-key__help__help_commands] )) ||
_commander-cli__system__config__set-key__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system config set-key help help commands' commands "$@"
}
(( $+functions[_commander-cli__system__help_commands] )) ||
_commander-cli__system__help_commands() {
    local commands; commands=(
'config:Config management' \
'rauc:RAUC management' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system help commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__config_commands] )) ||
_commander-cli__system__help__config_commands() {
    local commands; commands=(
'get:Get config' \
'set-key:Set config' \
'reset:Reset to production' \
    )
    _describe -t commands 'commander-cli system help config commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__config__get_commands] )) ||
_commander-cli__system__help__config__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help config get commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__config__reset_commands] )) ||
_commander-cli__system__help__config__reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help config reset commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__config__set-key_commands] )) ||
_commander-cli__system__help__config__set-key_commands() {
    local commands; commands=(
'api-url:' \
    )
    _describe -t commands 'commander-cli system help config set-key commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__config__set-key__api-url_commands] )) ||
_commander-cli__system__help__config__set-key__api-url_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help config set-key api-url commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__help_commands] )) ||
_commander-cli__system__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help help commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__rauc_commands] )) ||
_commander-cli__system__help__rauc_commands() {
    local commands; commands=(
'install:Install bundle and reboot' \
'check:Check if bundle is accessible' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
    )
    _describe -t commands 'commander-cli system help rauc commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__rauc__check_commands] )) ||
_commander-cli__system__help__rauc__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help rauc check commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__rauc__install_commands] )) ||
_commander-cli__system__help__rauc__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help rauc install commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__rauc__rollback_commands] )) ||
_commander-cli__system__help__rauc__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help rauc rollback commands' commands "$@"
}
(( $+functions[_commander-cli__system__help__rauc__status_commands] )) ||
_commander-cli__system__help__rauc__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system help rauc status commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc_commands] )) ||
_commander-cli__system__rauc_commands() {
    local commands; commands=(
'install:Install bundle and reboot' \
'check:Check if bundle is accessible' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system rauc commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__check_commands] )) ||
_commander-cli__system__rauc__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc check commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help_commands] )) ||
_commander-cli__system__rauc__help_commands() {
    local commands; commands=(
'install:Install bundle and reboot' \
'check:Check if bundle is accessible' \
'rollback:Rollback system to previous Bundle' \
'status:Get RAUC status' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli system rauc help commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help__check_commands] )) ||
_commander-cli__system__rauc__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc help check commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help__help_commands] )) ||
_commander-cli__system__rauc__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc help help commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help__install_commands] )) ||
_commander-cli__system__rauc__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc help install commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help__rollback_commands] )) ||
_commander-cli__system__rauc__help__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc help rollback commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__help__status_commands] )) ||
_commander-cli__system__rauc__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc help status commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__install_commands] )) ||
_commander-cli__system__rauc__install_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc install commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__rollback_commands] )) ||
_commander-cli__system__rauc__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc rollback commands' commands "$@"
}
(( $+functions[_commander-cli__system__rauc__status_commands] )) ||
_commander-cli__system__rauc__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system rauc status commands' commands "$@"
}
(( $+functions[_commander-cli__system-status_commands] )) ||
_commander-cli__system-status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli system-status commands' commands "$@"
}
(( $+functions[_commander-cli__update_commands] )) ||
_commander-cli__update_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli update commands' commands "$@"
}
(( $+functions[_commander-cli__version_commands] )) ||
_commander-cli__version_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli version commands' commands "$@"
}
(( $+functions[_commander-cli__xcom_commands] )) ||
_commander-cli__xcom_commands() {
    local commands; commands=(
'status:' \
'config:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli xcom commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__config_commands] )) ||
_commander-cli__xcom__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli xcom config commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__help_commands] )) ||
_commander-cli__xcom__help_commands() {
    local commands; commands=(
'status:' \
'config:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli xcom help commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__help__config_commands] )) ||
_commander-cli__xcom__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli xcom help config commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__help__help_commands] )) ||
_commander-cli__xcom__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli xcom help help commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__help__status_commands] )) ||
_commander-cli__xcom__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli xcom help status commands' commands "$@"
}
(( $+functions[_commander-cli__xcom__status_commands] )) ||
_commander-cli__xcom__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli xcom status commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee_commands] )) ||
_commander-cli__zigbee_commands() {
    local commands; commands=(
'device:' \
'zcl:' \
'network:' \
'bindings:' \
'neighbors:' \
'status:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings_commands] )) ||
_commander-cli__zigbee__bindings_commands() {
    local commands; commands=(
'list:List the bindings of a device' \
'list-all:List all bindings' \
'create:Create a binding' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee bindings commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__create_commands] )) ||
_commander-cli__zigbee__bindings__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__help_commands] )) ||
_commander-cli__zigbee__bindings__help_commands() {
    local commands; commands=(
'list:List the bindings of a device' \
'list-all:List all bindings' \
'create:Create a binding' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee bindings help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__help__create_commands] )) ||
_commander-cli__zigbee__bindings__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings help create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__help__help_commands] )) ||
_commander-cli__zigbee__bindings__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__help__list_commands] )) ||
_commander-cli__zigbee__bindings__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings help list commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__help__list-all_commands] )) ||
_commander-cli__zigbee__bindings__help__list-all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings help list-all commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__list_commands] )) ||
_commander-cli__zigbee__bindings__list_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings list commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__bindings__list-all_commands] )) ||
_commander-cli__zigbee__bindings__list-all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee bindings list-all commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device_commands] )) ||
_commander-cli__zigbee__device_commands() {
    local commands; commands=(
'remove:Remove a device from controller table' \
'clear-table:Clear controller table' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee device commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__clear-table_commands] )) ||
_commander-cli__zigbee__device__clear-table_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee device clear-table commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__help_commands] )) ||
_commander-cli__zigbee__device__help_commands() {
    local commands; commands=(
'remove:Remove a device from controller table' \
'clear-table:Clear controller table' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee device help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__help__clear-table_commands] )) ||
_commander-cli__zigbee__device__help__clear-table_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee device help clear-table commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__help__help_commands] )) ||
_commander-cli__zigbee__device__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee device help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__help__remove_commands] )) ||
_commander-cli__zigbee__device__help__remove_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee device help remove commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__device__remove_commands] )) ||
_commander-cli__zigbee__device__remove_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee device remove commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help_commands] )) ||
_commander-cli__zigbee__help_commands() {
    local commands; commands=(
'device:' \
'zcl:' \
'network:' \
'bindings:' \
'neighbors:' \
'status:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__bindings_commands] )) ||
_commander-cli__zigbee__help__bindings_commands() {
    local commands; commands=(
'list:List the bindings of a device' \
'list-all:List all bindings' \
'create:Create a binding' \
    )
    _describe -t commands 'commander-cli zigbee help bindings commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__bindings__create_commands] )) ||
_commander-cli__zigbee__help__bindings__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help bindings create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__bindings__list_commands] )) ||
_commander-cli__zigbee__help__bindings__list_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help bindings list commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__bindings__list-all_commands] )) ||
_commander-cli__zigbee__help__bindings__list-all_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help bindings list-all commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__device_commands] )) ||
_commander-cli__zigbee__help__device_commands() {
    local commands; commands=(
'remove:Remove a device from controller table' \
'clear-table:Clear controller table' \
    )
    _describe -t commands 'commander-cli zigbee help device commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__device__clear-table_commands] )) ||
_commander-cli__zigbee__help__device__clear-table_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help device clear-table commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__device__remove_commands] )) ||
_commander-cli__zigbee__help__device__remove_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help device remove commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__help_commands] )) ||
_commander-cli__zigbee__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__neighbors_commands] )) ||
_commander-cli__zigbee__help__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli zigbee help neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__neighbors__get_commands] )) ||
_commander-cli__zigbee__help__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__neighbors__refresh_commands] )) ||
_commander-cli__zigbee__help__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__network_commands] )) ||
_commander-cli__zigbee__help__network_commands() {
    local commands; commands=(
'create:Create a network (centralized)' \
'leave:Leave the current network and clear the device table' \
'open:Opens a network for joining, no install code, broadcast permit join for 180s' \
'close:Closes a network for joins and rejoins' \
    )
    _describe -t commands 'commander-cli zigbee help network commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__network__close_commands] )) ||
_commander-cli__zigbee__help__network__close_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help network close commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__network__create_commands] )) ||
_commander-cli__zigbee__help__network__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help network create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__network__leave_commands] )) ||
_commander-cli__zigbee__help__network__leave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help network leave commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__network__open_commands] )) ||
_commander-cli__zigbee__help__network__open_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help network open commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__status_commands] )) ||
_commander-cli__zigbee__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help status commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__zcl_commands] )) ||
_commander-cli__zigbee__help__zcl_commands() {
    local commands; commands=(
'read:Read an attribute' \
'write:Write an attribute' \
    )
    _describe -t commands 'commander-cli zigbee help zcl commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__zcl__read_commands] )) ||
_commander-cli__zigbee__help__zcl__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help zcl read commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__help__zcl__write_commands] )) ||
_commander-cli__zigbee__help__zcl__write_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee help zcl write commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors_commands] )) ||
_commander-cli__zigbee__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__get_commands] )) ||
_commander-cli__zigbee__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__help_commands] )) ||
_commander-cli__zigbee__neighbors__help_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee neighbors help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__help__get_commands] )) ||
_commander-cli__zigbee__neighbors__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee neighbors help get commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__help__help_commands] )) ||
_commander-cli__zigbee__neighbors__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee neighbors help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__help__refresh_commands] )) ||
_commander-cli__zigbee__neighbors__help__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee neighbors help refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__neighbors__refresh_commands] )) ||
_commander-cli__zigbee__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network_commands] )) ||
_commander-cli__zigbee__network_commands() {
    local commands; commands=(
'create:Create a network (centralized)' \
'leave:Leave the current network and clear the device table' \
'open:Opens a network for joining, no install code, broadcast permit join for 180s' \
'close:Closes a network for joins and rejoins' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee network commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__close_commands] )) ||
_commander-cli__zigbee__network__close_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network close commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__create_commands] )) ||
_commander-cli__zigbee__network__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help_commands] )) ||
_commander-cli__zigbee__network__help_commands() {
    local commands; commands=(
'create:Create a network (centralized)' \
'leave:Leave the current network and clear the device table' \
'open:Opens a network for joining, no install code, broadcast permit join for 180s' \
'close:Closes a network for joins and rejoins' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee network help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help__close_commands] )) ||
_commander-cli__zigbee__network__help__close_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network help close commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help__create_commands] )) ||
_commander-cli__zigbee__network__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network help create commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help__help_commands] )) ||
_commander-cli__zigbee__network__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help__leave_commands] )) ||
_commander-cli__zigbee__network__help__leave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network help leave commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__help__open_commands] )) ||
_commander-cli__zigbee__network__help__open_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network help open commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__leave_commands] )) ||
_commander-cli__zigbee__network__leave_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network leave commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__network__open_commands] )) ||
_commander-cli__zigbee__network__open_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee network open commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__status_commands] )) ||
_commander-cli__zigbee__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee status commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl_commands] )) ||
_commander-cli__zigbee__zcl_commands() {
    local commands; commands=(
'read:Read an attribute' \
'write:Write an attribute' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee zcl commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__help_commands] )) ||
_commander-cli__zigbee__zcl__help_commands() {
    local commands; commands=(
'read:Read an attribute' \
'write:Write an attribute' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zigbee zcl help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__help__help_commands] )) ||
_commander-cli__zigbee__zcl__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee zcl help help commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__help__read_commands] )) ||
_commander-cli__zigbee__zcl__help__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee zcl help read commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__help__write_commands] )) ||
_commander-cli__zigbee__zcl__help__write_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee zcl help write commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__read_commands] )) ||
_commander-cli__zigbee__zcl__read_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee zcl read commands' commands "$@"
}
(( $+functions[_commander-cli__zigbee__zcl__write_commands] )) ||
_commander-cli__zigbee__zcl__write_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zigbee zcl write commands' commands "$@"
}
(( $+functions[_commander-cli__zwave_commands] )) ||
_commander-cli__zwave_commands() {
    local commands; commands=(
'status:Get Z-Wave status' \
'ping-node:Ping node' \
'get-nodes-status:Get status of one or more nodes' \
'rebuild-node-routes:Rebuild node routes' \
'get-node-neighbors:List node’s neighbors' \
'firmware-update-ota:Firwmare update OTA' \
're-interview-node:Re-interview node, a.k.a refreshInfo topic' \
'write-value:Write value to a node' \
'soft-reset:Soft reset' \
'lifeline-health:' \
'neighbors:Neighbors' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zwave commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__firmware-update-ota_commands] )) ||
_commander-cli__zwave__firmware-update-ota_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave firmware-update-ota commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__get-node-neighbors_commands] )) ||
_commander-cli__zwave__get-node-neighbors_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave get-node-neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__get-nodes-status_commands] )) ||
_commander-cli__zwave__get-nodes-status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave get-nodes-status commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help_commands] )) ||
_commander-cli__zwave__help_commands() {
    local commands; commands=(
'status:Get Z-Wave status' \
'ping-node:Ping node' \
'get-nodes-status:Get status of one or more nodes' \
'rebuild-node-routes:Rebuild node routes' \
'get-node-neighbors:List node’s neighbors' \
'firmware-update-ota:Firwmare update OTA' \
're-interview-node:Re-interview node, a.k.a refreshInfo topic' \
'write-value:Write value to a node' \
'soft-reset:Soft reset' \
'lifeline-health:' \
'neighbors:Neighbors' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zwave help commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__firmware-update-ota_commands] )) ||
_commander-cli__zwave__help__firmware-update-ota_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help firmware-update-ota commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__get-node-neighbors_commands] )) ||
_commander-cli__zwave__help__get-node-neighbors_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help get-node-neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__get-nodes-status_commands] )) ||
_commander-cli__zwave__help__get-nodes-status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help get-nodes-status commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__help_commands] )) ||
_commander-cli__zwave__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help help commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__lifeline-health_commands] )) ||
_commander-cli__zwave__help__lifeline-health_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help lifeline-health commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__neighbors_commands] )) ||
_commander-cli__zwave__help__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
    )
    _describe -t commands 'commander-cli zwave help neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__neighbors__get_commands] )) ||
_commander-cli__zwave__help__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__neighbors__refresh_commands] )) ||
_commander-cli__zwave__help__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__ping-node_commands] )) ||
_commander-cli__zwave__help__ping-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help ping-node commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__re-interview-node_commands] )) ||
_commander-cli__zwave__help__re-interview-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help re-interview-node commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__rebuild-node-routes_commands] )) ||
_commander-cli__zwave__help__rebuild-node-routes_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help rebuild-node-routes commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__soft-reset_commands] )) ||
_commander-cli__zwave__help__soft-reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help soft-reset commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__status_commands] )) ||
_commander-cli__zwave__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help status commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__help__write-value_commands] )) ||
_commander-cli__zwave__help__write-value_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave help write-value commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__lifeline-health_commands] )) ||
_commander-cli__zwave__lifeline-health_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave lifeline-health commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors_commands] )) ||
_commander-cli__zwave__neighbors_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zwave neighbors commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__get_commands] )) ||
_commander-cli__zwave__neighbors__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave neighbors get commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__help_commands] )) ||
_commander-cli__zwave__neighbors__help_commands() {
    local commands; commands=(
'get:Get neighbors' \
'refresh:Refresh the neighbors list' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'commander-cli zwave neighbors help commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__help__get_commands] )) ||
_commander-cli__zwave__neighbors__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave neighbors help get commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__help__help_commands] )) ||
_commander-cli__zwave__neighbors__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave neighbors help help commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__help__refresh_commands] )) ||
_commander-cli__zwave__neighbors__help__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave neighbors help refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__neighbors__refresh_commands] )) ||
_commander-cli__zwave__neighbors__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave neighbors refresh commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__ping-node_commands] )) ||
_commander-cli__zwave__ping-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave ping-node commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__re-interview-node_commands] )) ||
_commander-cli__zwave__re-interview-node_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave re-interview-node commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__rebuild-node-routes_commands] )) ||
_commander-cli__zwave__rebuild-node-routes_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave rebuild-node-routes commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__soft-reset_commands] )) ||
_commander-cli__zwave__soft-reset_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave soft-reset commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__status_commands] )) ||
_commander-cli__zwave__status_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave status commands' commands "$@"
}
(( $+functions[_commander-cli__zwave__write-value_commands] )) ||
_commander-cli__zwave__write-value_commands() {
    local commands; commands=()
    _describe -t commands 'commander-cli zwave write-value commands' commands "$@"
}

if [ "$funcstack[1]" = "_commander-cli" ]; then
    _commander-cli "$@"
else
    compdef _commander-cli commander-cli
fi
