#!/usr/bin/env -S just --justfile
# vim: ft=just

set quiet

help:
  just --list --unsorted --justfile {{justfile()}}

# system monitor
top:
  #!/usr/bin/env zsh
  . ~/.zshrc
  btm --basic --mem_as_value

# connect HDMI-1 monitor to laptop
connect-monitor POSITION="above":
  xrandr --output HDMI-1 --auto --{{POSITION}} eDP-1

# focus a terminal window or launch a new one
term-open TITLE CMD DIR="$HOME":
  #!/usr/bin/env bash
  if ! i3-msg "[title=\"{{TITLE}}\"] focus"; then
    eval alacritty --title "{{TITLE}}" --working-directory="{{DIR}}" -e "{{CMD}}"
  fi

# run python REPL with useful python packages
term-py:
  nix-shell ~/.nixfiles/shells/py.nix --run "ipython --no-banner"

# fuzzy find and switch tmux session
tmux-switch:
  tmux list-sessions \
    | sed "s/:.*//" \
    | fzf --height 20%  --reverse \
    | xargs -I {} tmux switch-client -t {}

# create a tmux session if it doesn't exist and attach to it
tmux-sesh NAME CMD="" CLEAR="":
  #!/usr/bin/env bash
  if ! tmux has-session -t "{{NAME}}" 2>/dev/null; then
     tmux new-session -s "{{NAME}}" -d

    if [ "{{CMD}}" != "" ]; then
      tmux send-keys -t "{{NAME}}" "{{CMD}}" C-m
    fi

    if [ "{{CLEAR}}" = "clear" ]; then
      tmux send-keys -t "{{NAME}}" C-l
    fi
  fi

  tmux attach-session -t "{{NAME}}"

# direnv setup: from shell template or shells to use
use-nix +SHELLS:
  #!/usr/bin/env bash
  cd {{invocation_directory()}};
  if [ $# -gt 0 ]; then
    touch $(pwd)/.envrc
    for file in "$@"; do
      echo "use nix $file;" >> $(pwd)/.envrc
      echo "using nix shell @ $file"
    done
  else
    echo "use nix" > $(pwd)/.envrc
    echo "with import <nixpkgs> {}; mkShell { packages = [ pkg-config ]; }" > $(pwd)/shell.nix
    echo "using local nix shell"
  fi
  direnv allow

# direnv setup: from flake template or copied flake
use-flake FLAKE="":
  #!/usr/bin/env bash
  cd {{invocation_directory()}};
    touch `pwd`/.envrc
  if [ {{FLAKE}} -eq "" ]; then
    cp $file `pwd`/flake.nix
  else
    nix flake init
  fi
  direnv allow


# pipe to copy to system clipboard
cp:
  #!/usr/bin/env bash
  if [[ {{os()}} == "macos" ]]; then
    pbcopy
  else
    xclip -selection clipboard
  fi

# "light" or "dark"?
theme:
  #!/usr/bin/env bash
  if [[ "$(readlink "$HOME/.config/alacritty/theme.toml")" == *light* ]]; then
    echo "light"
  else
    echo "dark"
  fi

theme-nvim-set MODE:
  #!/usr/bin/env bash
  set -euo pipefail
  NVIM_CONFIG="$HOME/.config/nvim/lua/config"
  ln -sf "$NVIM_CONFIG/colors/{{MODE}}.lua" "$NVIM_CONFIG/colors/init.lua"
  ln -sf "$NVIM_CONFIG/theme/{{MODE}}.lua" "$NVIM_CONFIG/theme/init.lua"
  for SERVER in $(nvr --serverlist); do
    nvr --nostart --servername "$SERVER" \
      -cc "lua vim.api.nvim_set_option('background', '{{MODE}}')" \
      -cc "colorscheme ${mode_nvim[{{MODE}}]}"
  done

# set theme to "light" or "dark"
theme-set MODE: (theme-nvim-set MODE)
  #!/usr/bin/env bash
  set -euo pipefail
  I3_CONFIG="$HOME/.config/i3/config"
  DUNST_CONFIG="$HOME/.config/dunst/dunstrc"
  ALACRITTY_CONFIG="$HOME/.config/alacritty"
  GTK_CONFIG="$HOME/.config/gtk-3.0"
  ROFI_CONFIG="$HOME/.config/rofi"
  BRAVE_CONFIG="$HOME/.config/chrome-theme"
  declare -A mode_bg=( ["light"]="#FBF1C7" ["dark"]="#282828" )
  declare -A mode_text=( ["light"]="#076678" ["dark"]="#83A598" )
  declare -A mode_border=( ["light"]="#458588" ["dark"]="#54546d" )
  declare -A mode_wallpaper=( ["light"]="gruvbox-light-blue.png" ["dark"]="gruvbox-dark-blue.png" )
  declare -A mode_nvim=( ["light"]="kanagawa-lotus" ["dark"]="kanagawa" )
  declare -A mode_background=( ["light"]="#FBF1C7cc" ["dark"]="#282828cc" )
  declare -A mode_urgency_normal_fg=( ["light"]="#282828" ["dark"]="#efd8a5" )
  declare -A mode_urgency_critical_fg=( ["light"]="#880808" ["dark"]="#BF616A" )

  nitrogen --save --set-zoom-fill \
    "$HOME/.nixfiles/assets/${mode_wallpaper[{{MODE}}]}"
  ln -sf "$ALACRITTY_CONFIG/{{MODE}}.toml" "$ALACRITTY_CONFIG/theme.toml"
  touch "$ALACRITTY_CONFIG/alacritty.toml"
  # misc / immediate
  ln -sf "$GTK_CONFIG/{{MODE}}.ini" "$GTK_CONFIG/settings.ini"
  ln -sf "$ROFI_CONFIG/{{MODE}}.rasi" "$ROFI_CONFIG/theme.rasi"
  ln -sf "$BRAVE_CONFIG/{{MODE}}.json" "$BRAVE_CONFIG/manifest.json"
  rm -f "$BRAVE_CONFIG"/Cached\ Theme.pak
  # dunst
  sed -i "s/background = .*/background = \"${mode_background[{{MODE}}]}\"/" "$DUNST_CONFIG"
  # Update dunstrc for foreground and frame_color
  awk -v mode="{{MODE}}" \
      -v fg_norm="${mode_urgency_normal_fg[{{MODE}}]}" \
      -v fg_crit="${mode_urgency_critical_fg[{{MODE}}]}" \
      -v frame_norm="${mode_urgency_normal_fg[{{MODE}}]}" \
      -v frame_crit="${mode_urgency_critical_fg[{{MODE}}]}" \
      'BEGIN{OFS=FS="="}
       /^(\[urgency_normal\]|\[urgency_critical\])/ {section=$1}
       section=="[urgency_normal]" && /foreground/ {$2=" \""fg_norm"\""}
       section=="[urgency_normal]" && /frame_color/ {$2=" \""frame_norm"\""}
       section=="[urgency_critical]" && /foreground/ {$2=" \""fg_crit"\""}
       section=="[urgency_critical]" && /frame_color/ {$2=" \""frame_crit"\""}
       {print}' "$DUNST_CONFIG" > tmp && mv tmp "$DUNST_CONFIG"
  pkill dunst && dunst > /tmp/dunst.log 2>&1 &
  # i3
  sed -i "s/set \$bg .*/set \$bg ${mode_bg[{{MODE}}]}/" "$I3_CONFIG"
  sed -i "s/set \$text .*/set \$text ${mode_text[{{MODE}}]}/" "$I3_CONFIG"
  sed -i "s/set \$border .*/set \$border ${mode_border[{{MODE}}]}/" "$I3_CONFIG"
  i3-msg reload

# toggle between light and dark themes
theme-toggle:
  #!/usr/bin/env bash
  if [[ $(just -f {{justfile()}} theme) == "light" ]]; then
    just -f {{justfile()}} theme-set "dark"
  else
    just -f {{justfile()}} theme-set "light"
  fi

FEEDS_STATE_DIR:="${HOME}/.local/share/feeds"

# follow the feeds log
feeds-log:
  tail -fn10 {{FEEDS_STATE_DIR}}/log

# check for new items in feeds and notify
feeds-check:
  nix-shell feeds/shell.nix \
    --run 'python3 feeds/check.py {{FEEDS_STATE_DIR}}' \
    >> {{FEEDS_STATE_DIR}}/log

# parse through unread items and open the selected one
feeds-find:
  #!/usr/bin/env bash
  store=`ls {{FEEDS_STATE_DIR}} | fzf`
  selected=`jq -r '.[] | "\(.title) - \(.link)"' {{FEEDS_STATE_DIR}}/$store | fzf`
  if [ -n "$selected" ]; then \
    xdg-open `echo "$selected" | sed 's/.* - //'`; \
  fi

# extract a semver from a string
semver:
  grep -oP '(\d+\.\d+\.\d+)' | head -1

# patch the interpreter of a binary to use the nix link-loader
patchelf BIN:
  #!/usr/bin/env bash
  nix_shell_ld_path=$(nix-shell --run 'echo $LD_LIBRARY_PATH')
  nix_linker=$(echo $nix_shell_ld_path | tr ':' '\n' | grep ld-linux | head -n 1)
  patchelf --set-interpreter "$nix_linker" "$binary"

# https://xkcd.com/1168/
comp FILE:
  tar -xzvf {{FILE}}

# convert a string to UPPER CASE
to-upper:
  tr '[:lower:]' '[:upper:]'

# convert a string to lower case
to-lower:
  tr '[:upper:]' '[:lower:]'

# convert a string to kebab-case
to-kebab:
  sed 's/[ _]/-/g'

# convert a string to snake_case
to-snake:
  sed 's/[- ]/_/g'

# launch an HTTP server from current dir
serve PORT="8080":
  python -m http.server \
    -d {{invocation_directory()}} \
    {{PORT}}

DOCK_DEV:="dock/dev"
DOCK_BASE:="dock/base"

# enter a container with dev tools installed, pwd mounted
dock: (_dock-enter DOCK_DEV)

# enter a minimal container, pwd mounted
dock-base: (_dock-enter DOCK_BASE)

# build the "dock" containers
dock-build: (_dock-build "base" DOCK_BASE) (_dock-build "dev" DOCK_DEV)

_dock-build TARGET NAME:
  podman build -f docker/dev.dockerfile --target {{TARGET}} -t {{NAME}} .

_dock-enter CONTAINER:
  podman run -it --rm \
    --user=root:$(id -g) \
    -w /project -v {{invocation_directory()}}:/project:Z \
    {{CONTAINER}} bash

# run cargo clean in all cargo projects in a dir
clean-cargo DIR="~/code":
  find {{DIR}} -name Cargo.toml -execdir sh -c \
    'echo "cleaning: $(pwd)" && cargo clean' \;

# rm -rf node_modules in all npm projects in a dir
clean-npm DIR="~/code":
  find {{DIR}} -name package.json -execdir sh -c \
    'echo "cleaning: $(pwd)" && rm -rf node_modules' \;

# clean up docker containers
clean-docker:
  docker kill $(docker ps -q)
  docker rm $(docker ps -a -q)
  docker system prune -a

# clean up podman containers
clean-podman:
  podman stop $(podman ps -q)
  podman rm $(podman ps -a -q)
  podman image prune

# https://nixos.org/guides/nix-pills/garbage-collector
# collect all the nixos/nix garbage
nix-gc:
  nix-store --gc
  nix-store --optimise
  sudo nix-collect-garbage

# nixos-rebuild switch
nix-rebuild:
  #!/usr/bin/env zsh
  . ~/.zshrc
  nixfmt ~/.nixfiles
  dotfiles a ~/.nixfiles
  sudo nixos-rebuild switch --flake ~/.nixfiles#$(hostname) -v
  echo -e "\033[0;34mcommit message:\033[0m"
  read COMMIT_MESSAGE
  dotfiles commit -m "nixos: $COMMIT_MESSAGE" \
    -m "$(nixos-rebuild list-generations | grep current)"
