#!/usr/bin/env -S just --justfile
# vim: ft=just

set quiet

help:
  just --list --unsorted --justfile {{justfile()}}

_info MSG:
  echo -e "\033[0;34minfo: {{MSG}}\033[0m"

_warn MSG:
  echo -e "\033[0;33mwarn: {{MSG}}\033[0m"

# system monitor
[group('cli')]
top:
  #!/usr/bin/env zsh
  . ~/.zshrc
  btm --basic --process_memory_as_value

[group('sec')]
[linux]
check-net:
  #!/usr/bin/env bash

  echo "[+] Checking UFW Firewall Status..."
  sudo ufw status verbose || echo "[-] UFW not installed or inactive."

  echo "[+] Listing all services and their ports"
  sudo ss -tulnp

  echo "[+] Detecting Public IP Address..."
  PUBLIC_IP=$(curl -s -4 icanhazip.com)
  if [[ -z "$PUBLIC_IP" ]]; then
    echo "[-] Failed to retrieve public IP."
    exit 1
  fi
  echo "Your Public IP: $PUBLIC_IP"

  echo "[+] Scanning Open Ports on Public IP..."
  nmap -Pn "$PUBLIC_IP" || echo "[-] Nmap scan failed."

  echo "[+] Security check complete."

# pipe to copy to system clipboard
[group('cli')]
[macos]
cp:
  pbcopy

[group('cli')]
[linux]
cp:
  xclip -selection clipboard

[group('cli')]
[linux]
wifi:
  #!/usr/bin/env bash

  nmcli device wifi rescan
  SSID=$(nmcli -t -f SSID device wifi list | fzf --height 40% --reverse --border --prompt "Select a Wi-Fi network: ")

  if [ -n "$SSID" ]; then
      nmcli device wifi connect "$SSID"
  else
      echo "No Wi-Fi network selected."
  fi

# extract a semver from a string
[group('cli')]
semver:
  grep -oP '(\d+\.\d+\.\d+)' | head -1

# patch the interpreter of a binary to use the nix link-loader
[group('cli')]
patchelf BIN:
  #!/usr/bin/env bash
  nix_shell_ld_path=$(nix-shell --run 'echo $LD_LIBRARY_PATH')
  nix_linker=$(echo $nix_shell_ld_path | tr ':' '\n' | grep ld-linux | head -n 1)
  patchelf --set-interpreter "$nix_linker" "$binary"

# https://xkcd.com/1168/
[group('cli')]
comp FILE:
  tar -xzvf {{FILE}}

# convert a string to UPPER CASE
[group('cli')]
to-upper:
  tr '[:lower:]' '[:upper:]'

# convert a string to lower case
[group('cli')]
to-lower:
  tr '[:upper:]' '[:lower:]'

# convert a string to kebab-case
[group('cli')]
to-kebab:
  sed 's/[ _]/-/g'

# convert a string to snake_case
[group('cli')]
to-snake:
  sed 's/[- ]/_/g'

# launch an HTTP server from current dir
[group('cli')]
serve PORT="8080":
  python3 -m http.server \
    -d {{invocation_directory()}} \
    {{PORT}}

# connect HDMI-1 monitor to laptop
[group('hdmi')]
hdmi-screen POSITION="above" SCALE="1.0":
  xrandr --output HDMI-A-0 --auto --{{POSITION}} --scale {{SCALE}} eDP

# connect and default to HDMI-1 audio
[group('hdmi')]
hdmi-audio POSITION="above": (hdmi-screen POSITION)
  pulseaudio --kill && pulseaudio --start
  pactl load-module module-alsa-sink device=hw:0,3
  pactl set-default-sink alsa_output.hw_0_3
  amixer -c 0 set IEC958 unmute

# focus a terminal window or launch a new one
[group('term')]
term-open TITLE CMD DIR="$HOME":
  #!/usr/bin/env bash
  if ! i3-msg "[title=\"{{TITLE}}\"] focus"; then
    eval kitty --title "{{TITLE}}" --working-directory="{{DIR}}" -e "{{CMD}}"
  fi

# run python REPL with useful python packages
[group('term')]
term-py:
  #!/usr/bin/env zsh
  eval "$(pyenv init --path)" && \
  eval "$(pyenv init -)" && \
  eval "$(pyenv virtualenv-init -)" && \
  pyenv shell calc && \
  pyenv version && \
  python3

# fuzzy find and switch tmux session
[group('tmux')]
tmux-switch:
  tmux list-sessions \
    | sed "s/:.*//" \
    | fzf --height 20%  --reverse \
    | xargs -I {} tmux switch-client -t {}

# create a tmux session if it doesn't exist and attach to it
[group('tmux')]
tmux-sesh NAME CMD="" CLEAR="":
  #!/usr/bin/env bash
  if ! tmux has-session -t "{{NAME}}" 2>/dev/null; then
     tmux new-session -s "{{NAME}}" -d

    if [ "{{CMD}}" != "" ]; then
      tmux send-keys -t "{{NAME}}" "{{CMD}}" C-m
    fi

    if [ "{{CLEAR}}" = "clear" ]; then
      tmux send-keys -t "{{NAME}}" C-l
    fi
  fi

  tmux attach-session -t "{{NAME}}"

# direnv setup: from shell template or shells to use
[group('direnv')]
use-nix *SHELLS:
  #!/usr/bin/env bash
  cd {{invocation_directory()}};
  if [ $# -gt 0 ]; then
    touch $(pwd)/.envrc
    for file in "$@"; do
      echo "use nix $file;" >> $(pwd)/.envrc
      echo "using nix shell @ $file"
    done
  else
    echo "use nix" > $(pwd)/.envrc
    echo "with import <nixpkgs> {};
    mkShell { packages = [ pkg-config openssl ]; }
    " > $(pwd)/shell.nix
    echo "using local nix shell"
  fi
  direnv allow

# direnv setup: from flake template or copied flake
[group('direnv')]
use-flake FLAKE="":
  #!/usr/bin/env bash
  cd {{invocation_directory()}};
    touch `pwd`/.envrc
  if [ {{FLAKE}} -eq "" ]; then
    cp $file `pwd`/flake.nix
  else
    nix flake init
  fi
  direnv allow

# setup a nix devshell for a python env
[group('direnv')]
use-venv:
  #!/usr/bin/env bash
  cd {{invocation_directory()}}
  echo "with import <nixpkgs> { };
  mkShell {
    name = \"`basename $(pwd)`\";
    buildInputs =
      [ python312 pyenv openssl zlib bzip2 readline sqlite xz tk libffi gcc ];
    shellHook = ''
      VENV_DIR=\".venv\"
      if [ ! -d \"\$VENV_DIR\" ]; then
        python3 -m venv \"\$VENV_DIR\"
      fi
      source \"\$VENV_DIR/bin/activate\"
    '';
  }
  " > shell.nix
  echo "use nix" > .envrc
  direnv allow

# setup a pyenv (not for nix!)
[group('direnv')]
use-pyenv VENV_NAME:
  #!/usr/bin/env bash
  echo '#vim:ft=bash
  if which pyenv > /dev/null; then
    export PYENV_ROOT="$(pyenv root)"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    pyenv activate {{VENV_NAME}}
  fi
  ' > {{invocation_directory()}}/.envrc

# setup a nix shell for fnm (nvm)
[group('direnv')]
use-nvm:
  #!/usr/bin/env bash
  cd {{invocation_directory()}}
  touch .envrc
  echo "with import <nixpkgs> { };

  mkShell {
    packages = [ pkg-config openssl fnm ];
    shellHook = ''
      eval \"$(fnm env --use-on-cd --shell bash)\"
      fnm use 2>/dev/null || {
        fnm install && fnm use;
      }
      fnm use
    '';
  }
  " > shell.nix
  echo 'use nix' > .envrc
  direnv allow

# "light" or "dark"?
[group('theme')]
theme:
  #!/usr/bin/env bash
  if [[ "$(readlink "$HOME/.config/alacritty/theme.toml")" == *light* ]]; then
    echo "light"
  else
    echo "dark"
  fi

[group('theme')]
_theme-set-kitty MODE:
  kitten themes --reload-in=all {{MODE}}

[group('theme')]
_theme-set-alacritty MODE:
  #!/usr/bin/env bash
  set -euo pipefail
  ALACRITTY_CONFIG="$HOME/.config/alacritty"
  ln -sf "$ALACRITTY_CONFIG/{{MODE}}.toml" "$ALACRITTY_CONFIG/theme.toml"
  touch "$ALACRITTY_CONFIG/alacritty.toml"

[group('theme')]
_theme-set-nvim MODE:
  #!/usr/bin/env bash
  set -euo pipefail
  NVIM_CONFIG="$HOME/.config/nvim/lua/config"
  declare -A mode_nvim=( ["light"]="kanagawa-lotus" ["dark"]="kanagawa" )
  ln -sf "$NVIM_CONFIG/colors/{{MODE}}.lua" "$NVIM_CONFIG/colors/init.lua"
  ln -sf "$NVIM_CONFIG/theme/{{MODE}}.lua" "$NVIM_CONFIG/theme/init.lua"
  for SERVER in $(nvr --serverlist); do
    nvr --nostart --servername "$SERVER" \
      -cc "lua vim.api.nvim_set_option('background', '{{MODE}}')" \
      -cc "colorscheme ${mode_nvim[{{MODE}}]}"
  done

[group('theme')]
theme-common-set MODE: (_theme-set-kitty MODE) (_theme-set-alacritty MODE) (_theme-set-nvim MODE)

# set theme to "light" or "dark"
[group('theme')]
theme-set MODE: (theme-common-set MODE)
  #!/usr/bin/env bash
  set -euo pipefail
  I3_CONFIG="$HOME/.config/i3/config"
  DUNST_CONFIG="$HOME/.config/dunst/dunstrc"
  ROFI_CONFIG="$HOME/.config/rofi"
  BRAVE_CONFIG="$HOME/.config/chrome-theme"
  declare -A mode_bg=( ["light"]="#FBF1C7" ["dark"]="#282828" )
  declare -A mode_text=( ["light"]="#076678" ["dark"]="#83A598" )
  declare -A mode_border=( ["light"]="#458588" ["dark"]="#947fb8" )
  declare -A mode_wallpaper=( ["light"]="solid-light.png" ["dark"]="solid-dark.png" )
  declare -A mode_background=( ["light"]="#FBF1C7cc" ["dark"]="#282828cc" )
  declare -A mode_urgency_normal_fg=( ["light"]="#282828" ["dark"]="#efd8a5" )
  declare -A mode_urgency_critical_fg=( ["light"]="#880808" ["dark"]="#BF616A" )

  nitrogen --save --set-zoom-fill \
    "$HOME/.nixfiles/assets/${mode_wallpaper[{{MODE}}]}"
  # misc / immediate

  if [ -d "$HOME/.config/gtk-4.0" ]; then
    ln -sf "$HOME/.config/gtk-4.0/{{MODE}}.ini" "$HOME/.config/gtk-4.0/settings.ini"
  fi

  ln -sf "$HOME/.config/gtk-3.0/{{MODE}}.ini" "$HOME/.config/gtk-3.0/settings.ini"
  ln -sf "$ROFI_CONFIG/{{MODE}}.rasi" "$ROFI_CONFIG/theme.rasi"
  ln -sf "$BRAVE_CONFIG/{{MODE}}.json" "$BRAVE_CONFIG/manifest.json"
  rm -f "$BRAVE_CONFIG"/Cached\ Theme.pak
  # dunst
  sed -i "s/background = .*/background = \"${mode_background[{{MODE}}]}\"/" "$DUNST_CONFIG"
  # Update dunstrc for foreground and frame_color
  awk -v mode="{{MODE}}" \
      -v fg_norm="${mode_urgency_normal_fg[{{MODE}}]}" \
      -v fg_crit="${mode_urgency_critical_fg[{{MODE}}]}" \
      -v frame_norm="${mode_urgency_normal_fg[{{MODE}}]}" \
      -v frame_crit="${mode_urgency_critical_fg[{{MODE}}]}" \
      'BEGIN{OFS=FS="="}
       /^(\[urgency_normal\]|\[urgency_critical\])/ {section=$1}
       section=="[urgency_normal]" && /foreground/ {$2=" \""fg_norm"\""}
       section=="[urgency_normal]" && /frame_color/ {$2=" \""frame_norm"\""}
       section=="[urgency_critical]" && /foreground/ {$2=" \""fg_crit"\""}
       section=="[urgency_critical]" && /frame_color/ {$2=" \""frame_crit"\""}
       {print}' "$DUNST_CONFIG" > tmp && mv tmp "$DUNST_CONFIG"
  pkill dunst && dunst > /tmp/dunst.log 2>&1 &
  # i3
  sed -i "s/set \$bg .*/set \$bg ${mode_bg[{{MODE}}]}/" "$I3_CONFIG"
  sed -i "s/set \$text .*/set \$text ${mode_text[{{MODE}}]}/" "$I3_CONFIG"
  sed -i "s/set \$border .*/set \$border ${mode_border[{{MODE}}]}/" "$I3_CONFIG"
  i3-msg reload

# toggle between light and dark themes
[group('theme')]
theme-toggle:
  #!/usr/bin/env bash
  if [[ $(just -f {{justfile()}} theme) == "light" ]]; then
    just -f {{justfile()}} theme-set "dark"
  else
    just -f {{justfile()}} theme-set "light"
  fi

FEEDS_STATE_DIR:="${HOME}/.local/share/feeds"

# follow the feeds log
[group('feeds')]
feeds-log:
  mkdir -p {{FEEDS_STATE_DIR}}
  tail -fn10 {{FEEDS_STATE_DIR}}/log

# check for new items in feeds and notify
[group('feeds')]
feeds-check:
  mkdir -p {{FEEDS_STATE_DIR}} && touch {{FEEDS_STATE_DIR}}/log
  nix-shell feeds/shell.nix \
    --run 'python3 feeds/check.py {{FEEDS_STATE_DIR}}' \
    >> {{FEEDS_STATE_DIR}}/log

# parse through unread items and open the selected one
[group('feeds')]
feeds-find:
  #!/usr/bin/env bash
  store=`ls {{FEEDS_STATE_DIR}} | fzf`
  selected=`jq -r '.[] | "\(.title) - \(.link)"' {{FEEDS_STATE_DIR}}/$store | fzf`
  if [ -n "$selected" ]; then \
    xdg-open `echo "$selected" | sed 's/.* - //'`; \
  fi

DOCK_DEV:="dock/dev"
DOCK_BASE:="dock/base"

# enter a container with dev tools installed, pwd mounted
dock: (_dock-enter DOCK_DEV)

# enter a minimal container, pwd mounted
dock-base: (_dock-enter DOCK_BASE)

# build the "dock" containers
dock-build: (_dock-build "base" DOCK_BASE) (_dock-build "dev" DOCK_DEV)

_dock-build TARGET NAME:
  podman build -f docker/dev.dockerfile --target {{TARGET}} -t {{NAME}} .

_dock-enter CONTAINER:
  podman run -it --rm \
    --user=root:$(id -g) \
    -w /project -v {{invocation_directory()}}:/project:Z \
    {{CONTAINER}} bash

# fetch all git repos in a dir
fetch-all DIR="~/code":
  find {{DIR}} -name .git -execdir sh -c \
    'xctl _info "fetching: $(pwd)" && git fetch --all' \;

# run cargo clean in all cargo projects in a dir
[group('clean')]
clean-cargo DIR="~/code":
  find {{DIR}} -name Cargo.toml -execdir sh -c \
    'xctl _info "cleaning: $(pwd)" && cargo clean' \;

# rm -rf node_modules in all npm projects in a dir
[group('clean')]
clean-npm DIR="~/code":
  find {{DIR}} -name package.json -execdir sh -c \
    'xctl _info "cleaning: $(pwd)" && rm -rf node_modules' \;

# clean up docker containers
[group('clean')]
clean-docker:
  docker kill $(docker ps -q)
  docker rm $(docker ps -a -q)
  docker system prune -a

# clean up podman containers
[group('clean')]
clean-podman:
  podman stop $(podman ps -q)
  podman rm $(podman ps -a -q)
  podman image prune

# https://nixos.org/guides/nix-pills/garbage-collector
# collect all the nixos/nix garbage
[group('nix')]
nix-gc:
  nix-store --gc
  nix-store --optimise
  sudo nix-collect-garbage

# nixos-rebuild switch
[group('nix')]
nix-rebuild:
  #!/usr/bin/env zsh
  . ~/.zshrc
  nixfmt ~/.nixfiles
  dotfiles a ~/.nixfiles
  sudo nixos-rebuild switch --flake ~/.nixfiles#$(hostname) -v
  echo -e "\033[0;34mcommit message:\033[0m"
  read COMMIT_MESSAGE
  dotfiles commit -m "nixos: $COMMIT_MESSAGE" \
    -m "$(nixos-rebuild list-generations | grep current)"

wind LOCATION='40418f4a30ea47eeb5d4393f7b440215':
  #!/usr/bin/env bash
  curl -s https://www.weatherlink.com/embeddablePage/summaryData/{{LOCATION}} \
    | jq '{
            "lastReceived": (.lastReceived / 1000 | todate),
            "data": [
              .currConditionValues[]
                | select(.sensorDataName == "2 Min Avg Wind Speed" or .sensorDataName == "10 Min Avg Wind Speed" or .sensorDataName == "10 Min High Wind Speed")
                | {sensorDataName, reportedValue}
            ]
          }'

touchpad ACTION='disable':
  xinput {{ACTION}} $(xinput list | grep Touchpad | awk -F 'id=' '{print $2}' | awk '{print $1}')

check-battery THRESHOLD='20':
  #!/usr/bin/env bash
  battery_level=$(cat /sys/class/power_supply/BAT0/capacity)
  is_on_ac=$(cat /sys/class/power_supply/AC/online)
  if [ "$battery_level" -lt {{THRESHOLD}} ] && [ "$is_on_ac" -eq 0 ]; then
    dunstify -u critical -h string:x-dunst-stack-tag:battery \
      "Low Battery" "Battery level is low: $battery_level%"
  fi

# upgrade apt packages, firmware, and rust bins
[linux]
upgrade:
  sudo apt update && sudo apt upgrade -y
  fwupdmgr update
  cargo install-update -a --locked


notifs:
  #!/usr/bin/env bash
  logdir="$HOME/notifications"
  cd "$logdir" || exit 1
  file="$(ls *.jsonl 2>/dev/null | sort -r | fzf --prompt='Date > ' --height=40% --reverse)"
  [[ -z "$file" ]] && exit 0
  bat --paging=always --language=json "$file"


